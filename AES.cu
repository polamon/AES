/*
	file: AES.cu
	BY: FU ERDONG
*/

#define PX 283

#include <iostream>
#include <stdlib.h>
#include <sys/time.h>
#include <math.h>
using namespace std;

unsigned short int inversionMatrix[256] =
{
	0x0, 0x1, 0x8d, 0xf6, 0xcb, 0x52, 0x7b, 0xd1, 0xe8, 0x4f, 0x29, 0xc0, 0xb0, 0xe1, 0xe5, 0xc7, 
	0x74, 0xb4, 0xaa, 0x4b, 0x99, 0x2b, 0x60, 0x5f, 0x58, 0x3f, 0xfd, 0xcc, 0xff, 0x40, 0xee, 0xb2, 
	0x3a, 0x6e, 0x5a, 0xf1, 0x55, 0x4d, 0xa8, 0xc9, 0xc1, 0xa, 0x98, 0x15, 0x30, 0x44, 0xa2, 0xc2, 
	0x2c, 0x45, 0x92, 0x6c, 0xf3, 0x39, 0x66, 0x42, 0xf2, 0x35, 0x20, 0x6f, 0x77, 0xbb, 0x59, 0x19, 
	0x1d, 0xfe, 0x37, 0x67, 0x2d, 0x31, 0xf5, 0x69, 0xa7, 0x64, 0xab, 0x13, 0x54, 0x25, 0xe9, 0x9, 
	0xed, 0x5c, 0x5, 0xca, 0x4c, 0x24, 0x87, 0xbf, 0x18, 0x3e, 0x22, 0xf0, 0x51, 0xec, 0x61, 0x17, 
	0x16, 0x5e, 0xaf, 0xd3, 0x49, 0xa6, 0x36, 0x43, 0xf4, 0x47, 0x91, 0xdf, 0x33, 0x93, 0x21, 0x3b, 
	0x79, 0xb7, 0x97, 0x85, 0x10, 0xb5, 0xba, 0x3c, 0xb6, 0x70, 0xd0, 0x6, 0xa1, 0xfa, 0x81, 0x82, 
	0x83, 0x7e, 0x7f, 0x80, 0x96, 0x73, 0xbe, 0x56, 0x9b, 0x9e, 0x95, 0xd9, 0xf7, 0x2, 0xb9, 0xa4, 
	0xde, 0x6a, 0x32, 0x6d, 0xd8, 0x8a, 0x84, 0x72, 0x2a, 0x14, 0x9f, 0x88, 0xf9, 0xdc, 0x89, 0x9a, 
	0xfb, 0x7c, 0x2e, 0xc3, 0x8f, 0xb8, 0x65, 0x48, 0x26, 0xc8, 0x12, 0x4a, 0xce, 0xe7, 0xd2, 0x62, 
	0xc, 0xe0, 0x1f, 0xef, 0x11, 0x75, 0x78, 0x71, 0xa5, 0x8e, 0x76, 0x3d, 0xbd, 0xbc, 0x86, 0x57, 
	0xb, 0x28, 0x2f, 0xa3, 0xda, 0xd4, 0xe4, 0xf, 0xa9, 0x27, 0x53, 0x4, 0x1b, 0xfc, 0xac, 0xe6, 
	0x7a, 0x7, 0xae, 0x63, 0xc5, 0xdb, 0xe2, 0xea, 0x94, 0x8b, 0xc4, 0xd5, 0x9d, 0xf8, 0x90, 0x6b, 
	0xb1, 0xd, 0xd6, 0xeb, 0xc6, 0xe, 0xcf, 0xad, 0x8, 0x4e, 0xd7, 0xe3, 0x5d, 0x50, 0x1e, 0xb3, 
	0x5b, 0x23, 0x38, 0x34, 0x68, 0x46, 0x3, 0x8c, 0xdd, 0x9c, 0x7d, 0xa0, 0xcd, 0x1a, 0x41, 0x1c
};

unsigned short int modPXMatrix[256] = 
{
	0x0, 0x1b, 0x36, 0x2d, 0x6c, 0x77, 0x5a, 0x41, 0xd8, 0xc3, 0xee, 0xf5, 0xb4, 0xaf, 0x82, 0x99, 
	0xab, 0xb0, 0x9d, 0x86, 0xc7, 0xdc, 0xf1, 0xea, 0x73, 0x68, 0x45, 0x5e, 0x1f, 0x4, 0x29, 0x32, 
	0x4d, 0x56, 0x7b, 0x60, 0x21, 0x3a, 0x17, 0xc, 0x95, 0x8e, 0xa3, 0xb8, 0xf9, 0xe2, 0xcf, 0xd4, 
	0xe6, 0xfd, 0xd0, 0xcb, 0x8a, 0x91, 0xbc, 0xa7, 0x3e, 0x25, 0x8, 0x13, 0x52, 0x49, 0x64, 0x7f, 
	0x9a, 0x81, 0xac, 0xb7, 0xf6, 0xed, 0xc0, 0xdb, 0x42, 0x59, 0x74, 0x6f, 0x2e, 0x35, 0x18, 0x3, 
	0x31, 0x2a, 0x7, 0x1c, 0x5d, 0x46, 0x6b, 0x70, 0xe9, 0xf2, 0xdf, 0xc4, 0x85, 0x9e, 0xb3, 0xa8, 
	0xd7, 0xcc, 0xe1, 0xfa, 0xbb, 0xa0, 0x8d, 0x96, 0xf, 0x14, 0x39, 0x22, 0x63, 0x78, 0x55, 0x4e, 
	0x7c, 0x67, 0x4a, 0x51, 0x10, 0xb, 0x26, 0x3d, 0xa4, 0xbf, 0x92, 0x89, 0xc8, 0xd3, 0xfe, 0xe5, 
	0x2f, 0x34, 0x19, 0x2, 0x43, 0x58, 0x75, 0x6e, 0xf7, 0xec, 0xc1, 0xda, 0x9b, 0x80, 0xad, 0xb6, 
	0x84, 0x9f, 0xb2, 0xa9, 0xe8, 0xf3, 0xde, 0xc5, 0x5c, 0x47, 0x6a, 0x71, 0x30, 0x2b, 0x6, 0x1d, 
	0x62, 0x79, 0x54, 0x4f, 0xe, 0x15, 0x38, 0x23, 0xba, 0xa1, 0x8c, 0x97, 0xd6, 0xcd, 0xe0, 0xfb, 
	0xc9, 0xd2, 0xff, 0xe4, 0xa5, 0xbe, 0x93, 0x88, 0x11, 0xa, 0x27, 0x3c, 0x7d, 0x66, 0x4b, 0x50, 
	0xb5, 0xae, 0x83, 0x98, 0xd9, 0xc2, 0xef, 0xf4, 0x6d, 0x76, 0x5b, 0x40, 0x1, 0x1a, 0x37, 0x2c, 
	0x1e, 0x5, 0x28, 0x33, 0x72, 0x69, 0x44, 0x5f, 0xc6, 0xdd, 0xf0, 0xeb, 0xaa, 0xb1, 0x9c, 0x87, 
	0xf8, 0xe3, 0xce, 0xd5, 0x94, 0x8f, 0xa2, 0xb9, 0x20, 0x3b, 0x16, 0xd, 0x4c, 0x57, 0x7a, 0x61, 
	0x53, 0x48, 0x65, 0x7e, 0x3f, 0x24, 0x9, 0x12, 0x8b, 0x90, 0xbd, 0xa6, 0xe7, 0xfc, 0xd1, 0xca, 
};

unsigned char sBox[] =
{ /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/ 
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/ 
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/
};

void printBits(unsigned short int num)
{
	for (int i = 0; i < 16; i++ ) {
		if (i == 8) cout << " ";
		if (num & (1 << (15 - i))) {
			cout << "1";
		} else {
			cout << "0";
		}
	}
}

void division(unsigned short int &q, unsigned short int &r, unsigned short int a, unsigned short int b)
{
	int la, lb, i;

	q = 0;
	for (i = 15; i > 0; i--) if (a & (1 << i)) break;
	la = i;
	for (i = 15; i > 0; i--) if (b & (1 << i)) break;
	lb = i;
	for (i = la; i >= lb; i--)
		if (a & (1 << i)) {
			a ^= b << (i - lb);
			q ^= 1 << (i - lb);
		}
	r = a;
}

unsigned short int modPX(unsigned short int num)
{
	unsigned short int px;

	px = PX << 7;
	for (int i = 15; i >= 8; i--) {
		if (num & (1 << i)) num = num ^ px;
		px >>= 1;
	}
	return num;
}

void printModPXMatrix()
{
	for (int i = 0; i < 16; i++) {
		cout << "\t";
		for (int j = 0; j < 16; j++) {
			cout << "0x" << hex << modPX((i * 16 + j) << 8) << ", ";
		}
		cout << endl;
	}
}

unsigned short int multiply(unsigned short int a, unsigned short int b)
{
	unsigned short int c = 0;
	for (int i = 0; i < 8; i++)
		if (a & (1 << i)) c ^= (b << i);
	return ((c & 0x00ff) ^ modPXMatrix[c >> 8]);
}

unsigned short int inversion(unsigned short int num)
{
	unsigned short int a, b, q, r, k11, k12, k21, k22, k11n, k12n, k21n, k22n;

	if (num == 0) return 0;
	k11 = 1;
	k22 = 1;
	k12 = 0;
	k21 = 0;
	a = PX;
	b = num;

	while (b != 1) {
		division(q, r, a, b);
		a = b;
		b = r;
		k11n = k21;
		k12n = k22;
		k21n = k11 ^ multiply(q, k21);
		k22n = k12 ^ multiply(q, k22);
		k11 = k11n;
		k12 = k12n;
		k21 = k21n;
		k22 = k22n;
	}
	return modPX(k22);
}

void printInversionMatrix()
{
	for (int i = 0; i < 16; i++) {
		cout << "\t";
		for (int j = 0; j < 16; j++) {
			cout << "0x" << hex << inversion(i * 16 + j) << ", ";
		}
		cout << endl;
	}
}

__global__ void count(unsigned short int *in, unsigned short int *out) {
	unsigned short int gindex = threadIdx.x + blockIdx.x * blockDim.x;
	unsigned short int baseIndex = blockIdx.x * blockDim.x;

	unsigned short int counter = 0;
	unsigned short int temp;
	for (int i = 0; i < 256; i++) {
		temp = (i << 8) ^ in[baseIndex + i];
		temp &= gindex;
		for (int j = 1; j < 16; j++)
			if (temp & (1 << j)) temp ^= 0x01;
		if (!(temp & 0x1)) counter++;
	}

	out[gindex] = counter;
}

void testMultiply()
{
	struct timeval beginTime, endTime;

//multiply * 100,000
	gettimeofday(&beginTime, 0);
	cout << "Multiply for 100,000 times." << endl;
	for (int i = 0; i < 100000; i++) multiply(rand() % 256, rand() % 256);
	gettimeofday(&endTime, 0);
	cout << "uSeconds: "
		<< (endTime.tv_sec - beginTime.tv_sec) * 1000000 
		+ endTime.tv_usec - beginTime.tv_usec << endl << endl;

}

void testInversion()
{
	struct timeval beginTime, endTime;
	unsigned short int temp;


// inversion * 100,000
	gettimeofday(&beginTime, 0);
	cout << "Inversion for 100,000 times." << endl;
	for (int i = 0; i < 100000; i++) {
		while (!(temp = rand() % 256));
		if (multiply(inversionMatrix[temp], temp) - 1) cout << temp;
	}
	gettimeofday(&endTime, 0);
	cout << "uSeconds: "
		<< (endTime.tv_sec - beginTime.tv_sec) * 1000000 
		+ endTime.tv_usec - beginTime.tv_usec << endl << endl;

}

void sBoxAnalysis()
{
	struct timeval begin1, end1, begin2, end2;


// sBox Linear Analysis in normal way
	cout << "sBox linear analysis in normal way" << endl;
	gettimeofday(&begin1, 0);
	int check[256 * 256];
	int temp;
	int result;
	for (int i = 1; i < (256 * 256); i++) {
		result = 0;
		for (int j = 0; j < 256; j++) {
			temp = (j << 8) ^ sBox[j];
			temp &= i;
			for (int k = 1; k < 16; k++)
				if (temp & (1 << k)) temp ^= 0x01;
			if (!(temp & 0x1)) result++;
		}
		check[i] = result;
	}

	gettimeofday(&end1, 0);
	cout << "uSeconds: "
		<< (end1.tv_sec - begin1.tv_sec) * 1000000 
		+ end1.tv_usec - begin1.tv_usec << endl << endl;



// use CUDA to accelerate
	cout << "sBox linear analysis with CUDA" << endl;
	unsigned short int *in, *counter;
	unsigned short int *d_in, *d_counter;
	int size = 256 * 256 * sizeof(unsigned short int);

	gettimeofday(&begin1, 0);

	gettimeofday(&begin2, 0);
	cudaMalloc((void**)&d_in, size);
	cudaMalloc((void**)&d_counter, size);

	gettimeofday(&end2, 0);
	cout << "Time for cudaMalloc" << endl;
	cout << "uSeconds: "
		<< (end2.tv_sec - begin2.tv_sec) * 1000000 
		+ end2.tv_usec - begin2.tv_usec << endl;

	in = (unsigned short int*)malloc(size);
	counter = (unsigned short int*)malloc(size);


	for (int i = 0; i < 256; i++)
		for (int j = 0; j < 256; j++)
			in[i * 256 + j] = sBox[j];

	cudaMemcpy(d_in, in, size, cudaMemcpyHostToDevice);

	count<<<256, 256>>>(d_in, d_counter);

	cudaMemcpy(counter, d_counter, size, cudaMemcpyDeviceToHost);

	int N = 10;
	int dmax[N], imax[N];
	int det;
	for (int i = 0; i < N; i++) dmax[i] = 0;
	for (int i = 1; i < 65536; i++) {
		int j;
		det = abs(counter[i] - 128);
		if (det <= dmax[N - 1]) continue;
		for (j = N - 2; j >= 0; j--) {
			if (det < dmax[j]) break;
			dmax[j + 1] = dmax[j];
			imax[j + 1] = imax[j];
		}
		dmax[j + 1] = det;
		imax[j + 1] = i;
	}
	for (int i = 0; i < N; i++) {
		printBits(imax[i]);
		cout << "\t" << dmax[i] << endl;
	}


	gettimeofday(&end1, 0);
	cout << "Time in total" << endl;
	cout << "uSeconds: "
		<< (end1.tv_sec - begin1.tv_sec) * 1000000 
		+ end1.tv_usec - begin1.tv_usec << endl << endl;


// check
	for (int i = 1; i < 256 * 256; i++)
		if (check[i] != counter[i]) {
			cout << i << "\t" << check[i] << "\t" << hex << counter[i] << endl;
			//break;
		}

	free(in);
	free(counter);
	cudaFree(d_in);
	cudaFree(d_counter);



}

int main()
{
	srand(time(0));

	testMultiply();
	testInversion();
	sBoxAnalysis();

}

